generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model books {
  id               String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title            String
  writer           String
  publisher        String
  publication_year Int
  description      String
  price            Decimal       @db.Decimal(10, 2)
  stock_quantity   Int           @default(0)
  genre_id         String        @db.Uuid
  created_at       DateTime?     @default(now()) @db.Timestamp(6)
  updated_at       DateTime?     @default(now()) @db.Timestamp(6)
  deleted_at       DateTime?     @db.Timestamp(6)
  genres           genres        @relation(fields: [genre_id], references: [id], onUpdate: NoAction, map: "fk_genre")
  order_items      order_items[]

  @@index([deleted_at], map: "idx_books_deleted_at")
  @@index([genre_id], map: "idx_books_genre_id")
}

model genres {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  books      books[]

  @@index([deleted_at], map: "idx_genres_deleted_at")
}

model order_items {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  quantity   Int
  order_id   String    @db.Uuid
  book_id    String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  books      books     @relation(fields: [book_id], references: [id], onUpdate: NoAction, map: "fk_book")
  orders     orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order")

  @@index([book_id], map: "idx_order_items_book_id")
  @@index([order_id], map: "idx_order_items_order_id")
}

model orders {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String        @db.Uuid
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  updated_at  DateTime?     @default(now()) @db.Timestamp(6)
  order_items order_items[]
  users       users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@index([user_id], map: "idx_orders_user_id")
}

model users {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username   String    @unique
  password   String
  email      String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  orders     orders[]
}
